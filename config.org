* Package Manager
** Lexical Binding
In order to enable lexical binding in the config, this must be the first line of Emacs Lisp.
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

** Package
Compile external packages for [[https://www.emacswiki.org/emacs/GccEmacs][GccEmacs]].
#+begin_src emacs-lisp
;; Wait until 28.1
;; (setq package-native-compile t)
#+end_src

** Use Package
[[https://github.com/jwiegley/use-package][Use Package]] allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy.

Ensure that use-package is installed. If use-package isn't already installed, it's extremely likely that this is a fresh installation! So we'll want to update the package repository and install use-package before loading the literate configuration.
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)

(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src

The ~:ensure~ keyword causes the package(s) to be installed automatically if not already present on your system, it won't affect local packages. Enable ~:ensure t~ to be global for all packages.
#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

[[https://github.com/rranelli/auto-package-update.el][Auto package update]] automatically updates installed packages if at least auto-package-update-interval days have passed since the last update.
#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-now-async)
  (auto-package-update-delete-old-versions t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe))
#+end_src

** Quelpa
[[https://github.com/quelpa/quelpa][Quelpa]]: Build and install your Emacs Lisp packages on-the-fly directly from source.
#+begin_src emacs-lisp
(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))
#+end_src

[[https://github.com/quelpa/quelpa-use-package][quelpa-use-package]]: Emacs quelpa handler for use-package.
#+begin_src emacs-lisp
(use-package quelpa-use-package)
#+end_src

* Basic UI
** Color Theme
*** Modus Themes
#+begin_src emacs-lisp
(use-package modus-themes
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
      modus-themes-bold-constructs t

      ;; Options for `modus-themes-mode-line' are either nil, or a list
      ;; that can combine any of `3d' OR `moody', `borderless',
      ;; `accented', and a natural number for extra padding
      modus-themes-mode-line '(borderless)

      ;; Options for `modus-themes-markup' are either nil, or a list
      ;; that can combine any of `bold', `italic', `background',
      ;; `intense'.
      modus-themes-markup '(background italic)

      ;; Options for `modus-themes-paren-match' are either nil (the
      ;; default), or a list of properties that may include any of those
      ;; symbols: `bold', `intense', `underline'
      modus-themes-paren-match '(bold intense)

      ;; Options for `modus-themes-links' are either nil (the default),
      ;; or a list of properties that may include any of those symbols:
      ;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
      ;; `bold', `italic', `background'
      modus-themes-links '(neutral-underline background)

      ;; Options for `modus-themes-prompts' are either nil (the
      ;; default), or a list of properties that may include any of those
      ;; symbols: `background', `bold', `gray', `intense', `italic'
      modus-themes-prompts '(intense bold)

      modus-themes-completions 'moderate ; {nil,'moderate,'opinionated}

      ;; Options for `modus-themes-region' are either nil (the default),
      ;; or a list of properties that may include any of those symbols:
      ;; `no-extend', `bg-only', `accented'
      modus-themes-region '(bg-only no-extend)

      modus-themes-headings ; this is an alist: read the manual or its doc string
      '((1 . (1.15))
        (2 . (1.05))
        (t . (semibold))))

  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  (modus-themes-load-operandi))
#+end_src

*** Default Face
#+begin_src emacs-lisp
(set-face-foreground 'default "mac:textColor")
(set-face-foreground 'link "mac:linkColor")
(set-face-background 'isearch "mac:findHighlightColor")
(set-face-foreground 'isearch nil)
(set-face-background 'lazy-highlight "mac:findHighlightColor")
#+end_src

*** Programming Face
#+begin_src emacs-lisp
(set-face-foreground 'font-lock-function-name-face "mac:linkColor")
;; (set-face-foreground 'font-lock-variable-name-face "orange red")
(set-face-foreground 'font-lock-keyword-face "#874bf8")
(set-face-foreground 'font-lock-comment-face "DarkGray")
;; (set-face-foreground 'font-lock-type-face "#1E90FF")
(set-face-foreground 'font-lock-constant-face "dark cyan")
;; (set-face-foreground 'font-lock-builtin-face "#1E90FF")
(set-face-foreground 'font-lock-string-face "chocolate")
#+end_src

*** Emacs Lisp
[[https://github.com/Fanael/highlight-defined][highlight-defined]] is an Emacs minor mode that highlights defined Emacs Lisp symbols in source code.

Currently it recognizes Lisp function, built-in function, macro, face and variable names.
#+begin_src emacs-lisp
(use-package highlight-defined
  :hook
  (emacs-lisp-mode . highlight-defined-mode))
#+end_src

*** Markup Face
**** Org Mode
#+begin_src emacs-lisp
(set-face-foreground 'org-meta-line "Gray")
(set-face-foreground 'org-drawer "Gray")
(set-face-foreground 'org-document-info-keyword "Gray")
(set-face-foreground 'org-date "Gray")
(set-face-foreground 'org-link "mac:linkColor")

(set-face-attribute 'org-level-1 nil :foreground "mac:linkColor")
(set-face-attribute 'org-level-2 nil :foreground "#874bf8")
(set-face-attribute 'org-level-3 nil :foreground "dark cyan")
(set-face-attribute 'org-level-4 nil :foreground "violet red")
(set-face-attribute 'org-level-5 nil :foreground "SpringGreen4")
(set-face-attribute 'org-level-6 nil :foreground "orange red")
(set-face-attribute 'org-level-7 nil :foreground "light sea green")
(set-face-attribute 'org-level-8 nil :foreground "chocolate")

(set-face-attribute 'org-headline-done nil :foreground "gray")
(set-face-attribute 'org-done nil :foreground "gray"
                                  :weight 'normal)
#+end_src

**** Markdown

*** Terminal Face

** Title Bar
Show icon and full path in title bar.
#+begin_src emacs-lisp
(setq frame-title-format
    '(:eval
       (if buffer-file-name
           (abbreviate-file-name buffer-file-name)
           "%b")))
#+end_src

** Cursor
Set default cursor type to bar.
#+begin_src emacs-lisp
(setq-default cursor-type 'bar) 
#+end_src

Disable cursor in inactive window.
#+begin_src emacs-lisp
(setq-default cursor-in-non-selected-windows nil)
#+end_src

** Fringe
#+begin_src emacs-lisp
(use-package emacs
  :config
  ;; Disable ugly bitmap in fringe.
  (define-fringe-bitmap 'left-arrow [])
  (define-fringe-bitmap 'left-curly-arrow [])
  (define-fringe-bitmap 'left-triangle [])
  ;; Display … and ↩ for truncation and wrap.
  (defface fallback '((t :family "Fira Code Light"
                         :foreground "gray")) "Fallback")
  (set-display-table-slot standard-display-table 'truncation
                          (make-glyph-code ?… 'fallback))
  (set-display-table-slot standard-display-table 'wrap
                        (make-glyph-code ?↩ 'fallback)))
#+end_src

** Modeline
Use a single line as modeline.
#+begin_src emacs-lisp
(use-package emacs
  :custom-face
  (header-line ((t (:background "grey90" :foreground "grey20" :box nil))))
  (mode-line ((t (:foreground "dim gray" :height 0.1))))
  (mode-line-inactive ((t (:inherit mode-line))))
  :config
  (setq-default mode-line-format '("")))
#+end_src

* Basic UX
** Messages
Use return to act as yes.
# http://mbork.pl/Comments_on_2021-11-13_y-or-n-p_but_with_RET_meaning_yes
#+begin_src emacs-lisp
(defconst y-or-n-p-ret-yes-map
  (let ((map (make-sparse-keymap)))
    (set-keymap-parent map y-or-n-p-map)
    (define-key map [return] 'act)
    map)
  "A keymap for y-or-n-p with RET meaning \"yes\".")
#+end_src

Disable these messages by setting command-error-function to a function that ignores unused signals.
https://emacs.stackexchange.com/a/20039/19518
#+begin_src emacs-lisp
(defun filter-command-error-function (data context caller)
  "Ignore the buffer-read-only, beginning-of-line, end-of-line, beginning-of-buffer, end-of-buffer signals; pass the rest to the default handler."
  (when (not (memq (car data) '(buffer-read-only
                                beginning-of-line
                                end-of-line
                                beginning-of-buffer
                                end-of-buffer)))
    (command-error-default-function data context caller)))

(setq command-error-function #'filter-command-error-function)
#+end_src

Disable init message.
#+begin_src emacs-lisp
(fset 'display-startup-echo-area-message 'ignore)
#+end_src

** Dired
*** Dired
Hide all the information about files and folders except their names.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode)))
;; Auto-refresh dired on file change
(add-hook 'dired-mode-hook 'auto-revert-mode)
(setq dired-use-ls-dired nil)
;; For Emacs 28
;; (use-package dired
;;   :ensure nil
;;   :custom
;;   (dired-kill-when-opening-new-dired-buffer t))
#+end_src
*** Dired Subtree
[[https://github.com/Fuco1/dired-hacks#dired-subtree][Dired Subtree]] can list subdirectories with ~Tab~.
#+begin_src emacs-lisp
(use-package dired-subtree
  :after dired
  :bind
  (:map  dired-mode-map
   ("<tab>"     . dired-subtree-toggle)
   ("<backtab>" . dired-subtree-cycle)))
#+end_src

** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] displays available keybindings in popup.
#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+end_src

** Ivy
[[https://github.com/abo-abo/swiper][Ivy]] is a generic completion front-end.
#+begin_src emacs-lisp
(use-package counsel
  :bind
  (("M-x" . counsel-M-x)
   ("s-f" . swiper-isearch)
   ("s-b" . ivy-switch-buffer)
   ("s-F" . counsel-rg))

  :config
  (use-package flx)
  (use-package amx)

  (ivy-mode 1)
  (add-to-list 'ivy-more-chars-alist '(counsel-rg . 1))
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
        '((swiper     . ivy--regex-plus)
          (counsel-rg . ivy--regex-plus)
          (t          . ivy--regex-fuzzy)))
  (set-face-background 'ivy-current-match "mac:selectedContentBackgroundColor")
  (set-face-background 'ivy-minibuffer-match-face-2 "mac:findHighlightColor")
  (set-face-background 'ivy-minibuffer-match-face-4 "mac:findHighlightColor"))
#+end_src

*** Ivy Rich
[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds description to the command in ~M-x~.
#+begin_src emacs-lisp
(use-package ivy-rich)
(ivy-rich-mode 1)
#+end_src

** Cursor
Disable cursor blink.
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src

** Helpful
[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides much more contextual information.
#+begin_src emacs-lisp
(use-package helpful
  :bind
  (("C-h f" . helpful-callable)
   ("C-h v" . helpful-variable)
   ("C-h k" . helpful-key)
   :map evil-normal-state-map
        ("q" . quit-window)))
#+end_src

* Window Management
** Session
[[https://github.com/iqbalansari/restart-emacs][restart-emacs]] offers a command ~restart-emacs~.
#+begin_src emacs-lisp
(use-package restart-emacs)
#+end_src

Associate [[https://github.com/willbchang/alfred-open-in-editor][alfred-open-in-editor]] to open folder in a new frame by ~emacsclient~.
#+begin_src emacs-lisp
(server-start)
#+end_src

** Frame
*** Keybindings
| Keybindings         | Features                     |
|---------------------+------------------------------|
| ~Command + Q~         | Quit Emacs                   |
| ~Command + N~         | Create new window            |
| ~Command + `~         | Change to other frame        |
| ~Shift + Command + W~ | Close current window         |
| ~Ctrl + Command + F~  | Set/Unset window full screen |

#+begin_src emacs-lisp
(global-set-key (kbd "s-n") 'new-empty-frame)

(defun new-empty-frame ()
  "Create a new frame with a new empty buffer. With org-mode and evil-mode enabled."
  (interactive)
  (let ((buffer (generate-new-buffer "untitled")))
    (set-buffer buffer)
    (org-mode)
    (evil-mode 1)
    (display-buffer buffer '(display-buffer-pop-up-frame . nil))))
#+end_src

** Buffer
*** Keybindings
| Keybindings | Features              |
|-------------+-----------------------|
| ~Command + F~ | Find File in Project  |
| ~Command + W~ | Close Current Buffer  |
| ~Command + [~ | Go to previous Buffer |
| ~Command + ]~ | Go to next Buffer     |
| ~Command + T~ | Create New Buffer     |
| ~Command + S~ | Save Buffer           |
| ~Command + R~ | Revert Buffer         |
| ~Command + ,~ | Open Preferences      |

#+begin_src emacs-lisp
(global-set-key (kbd "s-t") 'new-empty-buffer)
(global-set-key (kbd "s-r") 'revert-buffer-no-confirm)

(defun reveal-in-finder ()
  (interactive)
  (shell-command "open -R ."))
#+end_src

# http://ergoemacs.org/emacs/emacs_new_empty_buffer.html
#+begin_src emacs-lisp
(defun new-empty-buffer ()
  "Create a new empty buffer.
New buffer will be named “untitled” or “untitled<2>”, “untitled<3>”, etc."
  (interactive)
  (let (($buffer (generate-new-buffer "untitled")))
    (switch-to-buffer $buffer)
    (funcall initial-major-mode)
    (setq buffer-offer-save t)
    $buffer))

(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive)
  (save-buffer t)
  (revert-buffer t t)
  (message "Reverted `%s'" (buffer-name)))
#+end_src

*** Behaviors
No popup windows.
#+begin_src emacs-lisp
(setq pop-up-windows nil)
#+end_src

# TODO: Set init and fallback buffer to untitle instead of *scratch*.
Save files automatically.
#+begin_src emacs-lisp
(auto-save-visited-mode 1)
#+end_src

Save file silently.
#+begin_src emacs-lisp
(setq save-silently t)
#+end_src

Ensure files end with newline.
#+begin_src emacs-lisp
(setq require-final-newline t)
#+end_src

Revert (update) buffers automatically when underlying files are changed externally.
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

Set initial buffer mode to org-mode.
#+begin_src emacs-lisp
(setq-default initial-major-mode 'org-mode)
#+end_src

Save cursor position for each file.
#+begin_src emacs-lisp
(save-place-mode t)
#+end_src

Cancel partially typed or accidental command.
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+end_src

# FIX: Not working.
Ask ~y~ or ~n~ instead of ~yes~ or ~no~. Use ~return~ to act ~y~.
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(define-key y-or-n-p-map (kbd "RET") 'act)
#+end_src

Disable the ring bell when scroll beyond the document.
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

# TODO: No * and magit buffers after Cmd + W.
# TODO: magit-process
Ignore buffers start with ~*~ and ~magit:~ while moving to previous or next buffer.
# https://emacs.stackexchange.com/a/27770/29493
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'buffer-predicate
  (lambda (buf) (not (string-match-p "^\\(magit:\\|*\\)" (buffer-name buf)))))
#+end_src

Disable automatic backup~ file.
#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

*** Find File in Project
[[https://github.com/redguardtoo/find-file-in-project][Find file in project]] can quick access to project files in Emacs.
#+begin_src emacs-lisp
(use-package find-file-in-project
  :bind
  ("s-p" . find-file-in-project)
  :custom
  (ffip-use-rust-fd t))
#+end_src

* Word Processing
# TODO: company for elisp, especially for completion emacs functions/variables
# TODO: Edit comment or string/docstring or code block inside them in separate buffer with your favorite mode https://github.com/twlz0ne/separedit.el
# TODO: Lock file with password and TouchID, like Notes.app
** Basic Features
*** Displaying Text
**** Font
English font refer to early-init.el ~default-frame-alist~.
**** Keybindings

| Keybindings | Features            |
|-------------+---------------------|
| ~Command + +~ | Increase text scale |
| ~Command + -~ | Decrease text scale |
| ~Command + 0~ | Reset text scale    |

#+begin_src emacs-lisp
(global-set-key (kbd "s-0") 'text-scale-reset)
(global-set-key (kbd "s-=") 'text-scale-increase)
(global-set-key (kbd "s--") 'text-scale-decrease)

(defun text-scale-reset ()
  (interactive)
  (text-scale-set 0))
#+end_src

**** Behaviors
Improve the readability by increasing line spacing.
#+begin_src emacs-lisp
(setq-default line-spacing 0.1)
#+end_src

Highlight urls and make them clickable.
#+begin_src emacs-lisp
;; This will work until emacs 28.1
;; (global-goto-address-mode 1)
(add-hook 'text-mode-hook 'goto-address-mode)
#+end_src

Highlight paired brackets, includes (), [], {} and so on...
#+begin_src emacs-lisp
(use-package paren
  :config
  (show-paren-mode 1))
#+end_src

*** Moving Cursor
**** Keybindings
Make ~Command/Option + ArrowKey~ behaves like MacOS app.

| Keybindings   | Features                          |
|---------------+-----------------------------------|
| ~Command + ↑~ | Move to the top of the file       |
| ~Command + ↓~ | Move to the bottom of the file    |
| ~Command + ←~ | Move to the beginning of the line |
| ~Command + →~ | Move to the end of the line       |

*** Searching Text
# TODO: Disable persistant highlight
**** Keybindings
| Keybindings         | Features                      |
|---------------------+-------------------------------|
| ~Command + F~         | Search text in Buffer         |
| ~Shift + Command + F~ | Search text in current folder |

*** Selecting Text
**** Keybindings
| Keybindings                    | Features                               |       |
|--------------------------------+----------------------------------------+-------|
| ~Command + A~                    | Select all the content in current file |       |
| ~Shift + ↑~         | Select one line up                     | MacOS |
| ~Shift + ↓~         | Select one line down                   | MacOS |
| ~Shift + ←~         | Select one character left              | MacOS |
| ~Shift + →~         | Select one character right             | MacOS |
| ~Shift + Option + ←~ | Select one word left                   | MacOS |
| ~Shift + Option + →~ | Select one word right                  | MacOS |
| ~Shift + Command + ↑~ | Select to ttop of the file             | MacOS |
| ~Shift + Command + ↓~ | Select to bottom of the file           | MacOS |
| ~Shift + Command + ←~ | Select to t`he beginning of the line   | MacOS |
| ~Shift + Command + →~ | Select to the end of the line          | MacOS |

**** Behaviors
Highlight selection with system accent color.
#+begin_src emacs-lisp
(set-face-attribute 'region nil :background "mac:selectedTextbackgroundColor")
#+end_src

*** Editing Text
**** Keybindings
| Keybindings                 | Features                                         |
|-----------------------------+--------------------------------------------------|
| ~Command + C~                 | Copy text                                        |
| ~Command + X~                 | Cut text                                         |
| ~Command + V~                 | Paste text                                       |
| ~Command + Return~            | Force newline                                    |
| ~Command + Backspace~         | Delete current line from cursor to the beginning |
| ~Command + Shift + Backspace~ | Delete whole line entirely                       |
| ~Command + /~                 | Comment/Uncomment line(s)                        |


# TODO:
# 1. Comment on empty line, it adds (e.g.) and put the cursor behind
# 2. Comment one line, it adds before and forward one line
# 3. Comment on region, it add and move to the next line of the region
# 4. Cannot uncomment inside org mode code block
**** Behaviors
Auto pair brackets, quotes etc.
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

Do not indent on newlines.
#+begin_src emacs-lisp
(electric-indent-mode -1)
#+end_src

# FIX: not working via Command + V.
Overwrite selection on pasting.
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

Indent with 2 space.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)
#+end_src

**** Undo
Increase undo limit.
#+begin_src emacs-lisp
;; default is 160000
(setq undo-limit 800000)
;; default is 240000
(setq undo-strong-limit 12000000)
;; default is 24000000
(setq undo-outer-limit 120000000)
#+end_src
** Yasnippet

** Evil Mode
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.
*** Config
#+begin_src emacs-lisp
(use-package evil
  :bind
  (:map evil-normal-state-map
        ("j"   . evil-next-visual-line)
        ("k"   . evil-previous-visual-line)
   :map evil-insert-state-map
        ("C-v" . evil-visual-block)
   :map evil-motion-state-map
        ("RET" . nil))
  :init
  (setq evil-want-keybinding nil)
  ;; Set Evil cursor color and styles in different situations.
  (setq evil-emacs-state-cursor 'bar)
  (setq evil-normal-state-cursor '(box "deep pink"))
  (setq evil-insert-state-cursor '(bar "deep pink"))
  (setq evil-visual-state-cursor '(hollow "deep pink"))
  (setq evil-operator-state-cursor '(evil-half-cursor "deep pink"))
  (setq evil-replace-state-cursor '(hbar "deep pink"))
  :config
  (evil-mode 1)
  ;; https://stackoverflow.com/a/10166400/9984029
  ;; Make ESC cancel selection in insert mode.
  (defun evil-escape-cancel-selection-first ()
    "In evil insert state, make ESC to cancel selection first, then press ESC to go to normal state."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (evil-normal-state)))
  (define-key evil-insert-state-map [escape] 'evil-escape-cancel-selection-first)
    ;; Consist keybinding for text movements.
  (define-key evil-normal-state-map "\C-e" 'end-of-line)
  (define-key evil-insert-state-map "\C-e" 'end-of-line)
  (define-key evil-visual-state-map "\C-e" 'end-of-line)
  (define-key evil-motion-state-map "\C-e" 'end-of-line)
  (define-key evil-normal-state-map "\C-f" 'forward-char)
  (define-key evil-insert-state-map "\C-f" 'forward-char)
  (define-key evil-insert-state-map "\C-f" 'forward-char)
  (define-key evil-normal-state-map "\C-b" 'backward-char)
  (define-key evil-insert-state-map "\C-b" 'backward-char)
  (define-key evil-visual-state-map "\C-b" 'backward-char)
  (define-key evil-normal-state-map "\C-d" 'delete-char)
  (define-key evil-insert-state-map "\C-d" 'delete-char)
  (define-key evil-visual-state-map "\C-d" 'delete-char)
  (define-key evil-normal-state-map "\C-n" 'next-line)
  (define-key evil-insert-state-map "\C-n" 'next-line)
  (define-key evil-visual-state-map "\C-n" 'next-line)
  (define-key evil-normal-state-map "\C-p" 'previous-line)
  (define-key evil-insert-state-map "\C-p" 'previous-line)
  (define-key evil-visual-state-map "\C-p" 'previous-line)
  :custom
  ;; Do not echo the state in minibuffer.
  (evil-echo-state nil)
  ;; Use native keybindings on insert state.
  (evil-disable-insert-state-bindings t)
  ;; Records changes to separate undo instead of a big one in insert state.
  (evil-want-fine-undo t))
#+end_src

*** Evil Collection
[[https://github.com/emacs-evil/evil-collection][evil-collection]] provides evil-friendly bindings for many modes.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dired magit which-key diff-hl))
  (evil-collection-init))
#+end_src

*** Evil Surround
[[https://github.com/emacs-evil/evil-surround][evil-surround]] makes surround text with paired symbols easily.
#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1)
  ;; Use non-spaced pairs when surrounding with an opening brace.
  ;; Insert zero width space for org inline markup.
  ;; FIX: have to run Command + . again.
  (evil-add-to-alist 'evil-surround-pairs-alist
                      ?\( '("(" . ")")
                      ?\[ '("[" . "]")
                      ?\{ '("{" . "}")
                      ?\* '("\x200B*" . "*\x200B")
                      ?\+ '("\x200B+" . "+\x200B")
                      ?\/ '("\x200B/" . "/\x200B")
                      ?\~ '("\x200B~" . "~\x200B")
                      ?\= '("\x200B=" . "=\x200B")
                      ?\$ '("\x200B$" . "$\x200B")
                      ?\_ '("\x200B_" . "_\x200B")))
#+end_src

*** Evil Snip
[[https://github.com/hlissner/evil-snipe][Evil Snip]] enables incremental highlighting, repeat searches with ​~f~​, ~F~, ~t~ and ~T~.
#+begin_src emacs-lisp
(use-package evil-snipe
  :custom-face
  (evil-snipe-matches-face ((t (:inherit region :background "mac:findHighlightColor"))))
  :config
  (evil-snipe-override-mode +1))
#+end_src

*** Evil Goggles
[[https://github.com/edkolev/evil-goggles][Evil Goggles]] displays visual hint on evil edit operations.
#+begin_src emacs-lisp
(use-package evil-goggles
  :config
  (evil-goggles-mode)

  ;; optionally use diff-mode's faces; as a result, deleted text
  ;; optionally use diff-mode's faces; as a result, deleted text
  ;; will be highlighed with `diff-removed` face which is typically
  ;; some red color (as defined by the color theme)
  ;; other faces such as `diff-added` will be used for other actions
  (evil-goggles-use-diff-faces))
#+end_src

*** Avy
[[https://github.com/abo-abo/avy][Avy]] is for jumping to visible text using a char-based decision tree.
# TODO: Change avy leading face color
#+begin_src emacs-lisp
(use-package avy
  :bind 
  (("s-l" . avy-goto-line)
   :map evil-normal-state-map
        ("gt" . avy-goto-char)
        ("gf" . avy-goto-char)
        ("gs" . avy-goto-char-2)
        ("gl" . avy-goto-line)))
#+end_src

** Undo Fu
[[https://gitlab.com/ideasman42/emacs-undo-fu][Undo Fu]] is a simple, stable linear undo with redo.
#+begin_src emacs-lisp
(use-package undo-fu
  :bind
  (("s-z" . undo-fu-only-undo)
   ("s-Z" . undo-fu-only-redo)
   :map evil-normal-state-map
    ("u"   . undo-fu-only-undo)
    ("C-r" . undo-fu-only-redo))
  :custom
  (undo-fu-allow-undo-in-region t))
#+end_src

[[https://gitlab.com/ideasman42/emacs-undo-fu-session][Undo fu session]] writes undo/redo information upon file save which is restored where possible when the file is loaded again.
#+begin_src emacs-lisp
(use-package undo-fu-session
  :config
  (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
  (global-undo-fu-session-mode))
#+end_src

** Rainbow Delimiters
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  ((prog-mode . rainbow-delimiters-mode)
   (latex-mode . rainbow-delimiters-mode))
  :config
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground 'unspecified
                      :inherit 'error
                      :strike-through t))
#+end_src

** Super Save
# TODO: setup backup in one folder https://www.emacswiki.org/emacs/BackupDirectory
[[https://github.com/bbatsov/super-save][Super Save]] auto-saves your buffers, when certain events happen.
#+begin_src emacs-lisp
(use-package super-save
  :config
  (super-save-mode +1))
#+end_src

** Sudo Edit
[[https://github.com/nflath/sudo-edit][Sudo Edit]] can edit read only file.
#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

** Large File
[[https://github.com/m00natic/vlfi/][vlf]] can make you view large files in Emacs.
#+begin_src emacs-lisp
(use-package vlf
  :custom
  (vlf-application 'dont-ask))
#+end_src

** Multiple Cursor
- https://github.com/victorhge/iedit
- https://github.com/hlissner/evil-multiedit
- https://github.com/gabesoft/evil-mc
- https://github.com/syl20bnr/evil-iedit-state
- https://github.com/magnars/multiple-cursors.el
#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind
   (("s-d" . mc/mark-next-like-this)
    ("s-D" . mc/mark-all-like-this)
    :map mc/keymap
     ("<return>" .  newline)))
#+end_src

** Keybinding References
*Keybinding Values*:
| Meaning | Emacs Key Value | MacOS Key             |
|---------+-----------------+-----------------------|
| Control | =C=             | =Control(Ctrl)=       |
| Meta    | =M=             | =Option(Alt)=         |
| Super   | =s=             | =Command=             |
| Shift   | =S=             | =Shift=               |
| -       | =s-z=           | =Command + Z=         |
| -       | =s-Z=           | =Command + Shift + Z= |

*Keybinding Functions*: [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Reference]]
- =(define-key KEYMAP KEY DEF)=: Defines a key against a keyboard map. Use this if you want to change a keymap that isn’t the current buffer map.
- =(local-set-key KEY COMMAND)=: Binds a key to the local keymap used by the active buffer, unlike define-key which takes an explicit keymap to bind a key against.
- =(local-unset-key KEY)=: Removes KEY from the active, local keymap.
- =(global-set-key KEY COMMAND)=: Binds a key to the global keymap, making it available in all buffers (with a caveat – see below.)
- =(global-unset-key KEY)=: Removes KEY from the global keymap

*Keybinding Value Styles*:
- =(kbd "s-Z")=
- ~"s-Z"~
- ~[s-Z]~
  
* Markup Language
** Org Mode
*** Config
# FIX: Make not*Bold*AtAll work!
#      https://stackoverflow.com/a/24540651/9984029
#      https://emacs-china.org/t/orgmode/9740
# FIX: new line with unexpected 2 space indent.
# TODO: Do not truncate org table
#       https://github.com/misohena/phscroll
# TODO: Draw a line with -----
# TODO: dynamic headline bullets https://github.com/legalnonsense/org-visual-outline
[[https://orgmode.org/][Org]] is a highly flexible structured plain text file format.
#+begin_src emacs-lisp
(use-package org
  :hook
  ;; Enable headline and subcontent in the indented view.
  (org-mode . org-indent-mode)
  :bind
  (:map org-mode-map
        ("<M-S-left>"  . nil)
        ("<M-S-right>" . nil)
        ("<M-left>"    . left-word)
        ("<M-right>"   . right-word)
        ("<C-S-right>" . org-shiftmetaright)
        ("<C-S-left>"  . org-shiftmetaleft)
        ("<C-right>"   . org-metaright)
        ("<C-left>"    . org-metaleft))
  :init
  ;; Fix not working sometimes.
  ;; Enable shift selection in insert and visual mode.
  (add-hook 'evil-insert-state-entry-hook
            (lambda()
              (setq org-support-shift-select 'always)))
  (add-hook 'evil-normal-state-entry-hook
            (lambda()
              (setq org-support-shift-select nil)))
  (add-hook 'evil-visual-state-entry-hook
            (lambda()
              (setq org-support-shift-select 'always)))
  :custom
  ;; Fold all contents on opening a org file.
  (org-startup-folded t)
  ;; Disable reindent on every time editing code block.
  (org-src-preserve-indentation nil)
  (org-edit-src-content-indentation 0)
  ;; Use return to open link.
  (org-return-follows-link t)
  ;; Always display images.
  (org-startup-with-inline-images t)
  ;; Do not display image actual width, set to 500px by default.
  (org-image-actual-width 500)
  ;; Always download and display remote images.
  (org-display-remote-inline-image 'download)
  ;; Turncate lines
  (org-startup-truncated nil)
  ;; Export org to pdf through latex, support Chinese.
  (org-latex-pdf-process '("xelatex -interaction nonstopmode %f" "xelatex -interaction nonstopmode %f"))
  :config
  ;; Add REVIEW to org todo keywords.
  (setq org-todo-keywords '((sequence "TODO" "REVIEW" "DONE")))
  ;; Suppress org cycle message when pressing tab.
  (advice-add 'org-cycle :around #'suppress-messages)
  ;; Make verbatim with highlight text background.
  (add-to-list 'org-emphasis-alist
             '("=" (:background "#fef7ca")))
  ;; Make deletion(obsolote) text foreground with dark gray.
  (add-to-list 'org-emphasis-alist
             '("+" (:foreground "dark gray"
                    :strike-through t)))
  ;; Make code style around with box.
  (add-to-list 'org-emphasis-alist
             '("~" (:box (:line-width 1
                          :color "grey75"
                          :style released-button)))))
#+end_src
*** Org Superstar
[[https://github.com/integral-dw/org-superstar-mode][Org Superstar]] prettifies headings and plain lists in Org mode.
#+begin_src emacs-lisp
(use-package org-superstar
  :hook
  (org-mode . org-superstar-mode)
  :config
  (setq org-hide-leading-stars t)
  :custom
  ;; Change org headlines' style to ›.
  (org-superstar-headline-bullets-list '("›"))
  ;; Change org unordered list styles.
  (org-superstar-prettify-item-bullets t)
  (org-superstar-item-bullet-alist '((?* . ?•)
                                     (?+ . ?•)
                                     (?- . ?•))))
#+end_src

*** Org Appear
[[https://github.com/awth13/org-appear][Org Appear]] toggles visibility of hidden Org mode element parts upon entering and leaving an element.
# FIX: not working in latex frament
#+begin_src emacs-lisp
(use-package org-appear
  :hook
  (org-mode . org-appear-mode)
  :config
  ;; Instant toggle raw format on insert mode
  (setq org-appear-trigger 'manual)
  (add-hook 'evil-insert-state-entry-hook #'org-appear-manual-start nil t)
  (add-hook 'evil-insert-state-exit-hook #'org-appear-manual-stop nil t)
  ;; Hide emphasis makers.
  (setq org-hide-emphasis-markers t)
  ;; Prettify things like \pi, sub/super script.
  (setq org-pretty-entities t)
  ;; Hide keywords like #+TITLE:
  (setq org-hidden-keywords '(title email date author))
  :custom
  (org-appear-delay 0)
  (org-appear-autolinks t)
  (org-appear-autoentities t)
  (org-appear-autokeywords t)
  (org-appear-autosubmarkers t))
#+end_src

*** Xenops
  $r_{xx} =  \frac{\Sigma(X - \bar{X})(Y - \bar{Y})}{NS_{x}S_{y}}$

# FIX: inline CJK
[[https://github.com/dandavison/xenops][xenops]] is an editing environment for LaTeX mathematical documents with async rendering.
#   (kill-buffer "*Xenops-Doctor*")
#+begin_src emacs-lisp
(use-package xenops
  :hook
  (org-mode . xenops-mode)
  :bind
  (:map xenops-mode-map
   ;; xenops overrides the default paste behavior with xenops-handle-paste through xenops-util-define-key-with-fallback in xenops-define-key which breaks the delete-selection-mode
   ("s-v" . yank))
  :config
  ;; Suppress xenops startup messages.
  (advice-add 'xenops-mode :around #'suppress-messages)
  (setq xenops-math-image-scale-factor 1.8))
#+end_src

*** Org Surround Markup
Surround selection with org mode markup.
https://github.com/alphapapa/unpackaged.el#surround-region-with-emphasis-or-syntax-characters
# TODO: https://emacs-china.org/t/org-mode/597/51
#   1. org heading ending with x200b
#   2. make x200b invisible
#   3. auto delete x200b with backspace
#   4. combine link code with surround markup
#   5. https://github.com/zk-phi/electric-spacing
#+begin_src emacs-lisp
;;;###autoload
(defmacro org-surround-markup (&rest keys)
  "Define and bind interactive commands for each of KEYS that surround the region or insert text.
Commands are bound in `org-mode-map' to each of KEYS.  If the
region is active, commands surround it with the key character,
otherwise call `org-self-insert-command'."
  `(progn
     ,@(cl-loop for key in keys
                for name = (intern (concat "unpackaged/org-maybe-surround-" key))
                for docstring = (format "If region is active, surround it with \"%s\", otherwise call `org-self-insert-command'." key)
                collect `(defun ,name ()
                           ,docstring
                           (interactive)
                           (if (region-active-p)
                               (let ((beg (region-beginning))
                                     (end (region-end)))
                                 (save-excursion
                                   (goto-char end)
                                   (insert ,key)
                                   (insert-char #x200b) ;; Insert zero width space to make inline markup work.
                                   (goto-char beg)
                                   (insert-char #x200b)
                                   (insert ,key)))
                             (call-interactively #'org-self-insert-command)))
                collect `(define-key org-mode-map (kbd ,key) #',name))))

(org-surround-markup "~" "=" "*" "/" "_" "+" "$")
#+end_src

*** Org Mouse
Support mouse click.
#+begin_src emacs-lisp
(use-package org-mouse
  :ensure nil)
#+end_src

** Markdown Mode
[[https://github.com/jrblevin/markdown-mode][Markdown]] allows you to write using an easy-to-read, easy-to-write plain text format.
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

* Software Development
# TODO: company for elisp, especially for completion emacs functions/variables in orgmode src
** LSP
*** LSP Mode
[[https://github.com/emacs-lsp/lsp-mode][LSP Mode]] is a client/library for the Language Server Protocol.
#+begin_src emacs-lisp
(use-package lsp-mode
  :defer t
  :commands lsp
  :custom
  (lsp-keymap-prefix "C-x l")
  (lsp-ui-doc-enable nil)
  (lsp-auto-guess-root nil)
  (lsp-enable-file-watchers nil)
  (lsp-enable-folding nil)
  (read-process-output-max (* 1024 1024))
  (lsp-keep-workspace-alive nil)
  (lsp-eldoc-hook nil)

  (lsp-enable-symbol-highlighting nil)
  (lsp-ui-doc-enable nil)
  (lsp-lens-enable nil)
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-ui-sideline-enable nil)
  (lsp-modeline-code-actions-enable nil)
  (lsp-diagnostics-provider :none)
  (lsp-ui-sideline-show-diagnostics nil)
  (lsp-eldoc-enable-hover nil)
  (lsp-modeline-diagnostics-enable nil)
  (lsp-signature-auto-activate nil)
  (lsp-signature-render-documentation nil)
  :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
  :hook ((js-mode js2-mode typescript-mode web-mode) . lsp-deferred)
  :config
  (defun lsp-update-server ()
    "Update LSP server."
    (interactive)
    ;; Equals to `C-u M-x lsp-install-server'
    (lsp-install-server t)))
#+end_src
*** LSP UI
[[https://github.com/emacs-lsp/lsp-ui][LSP UI]] provides all the higher level UI modules of lsp-mode, like flycheck support and code lenses.
#+begin_src emacs-lisp
(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :custom-face
  (lsp-ui-doc-background ((t (:background nil))))
  (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  :bind
  (:map lsp-ui-mode-map
        ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
        ([remap xref-find-references] . lsp-ui-peek-find-references)
        ("C-c u" . lsp-ui-imenu)
        ("M-i" . lsp-ui-doc-focus-frame))
  (:map lsp-mode-map
        ("M-n" . forward-paragraph)
        ("M-p" . backward-paragraph))
  :custom
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-border (face-foreground 'default))
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-code-actions nil)
  :config
  ;; Use lsp-ui-doc-webkit only in GUI
  (when (display-graphic-p)
    (setq lsp-ui-doc-use-webkit t))
  ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
  ;; https://github.com/emacs-lsp/lsp-ui/issues/243
  (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
    (setq mode-line-format nil))
  ;; `C-g'to close doc
  (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide))
#+end_src

** Company
*** Company Mode
[[http://company-mode.github.io/][Company]] is a text completion framework for Emacs.
#+begin_src emacs-lisp
(use-package company
  :hook ((prog-mode LaTeX-mode latex-mode) . company-mode)
  :bind
  (:map company-active-map
        ([tab] . smarter-tab-to-complete)
        ("TAB" . smarter-tab-to-complete))
  :custom
  (company-minimum-prefix-length 1)
  (company-tooltip-align-annotations t)
  (company-require-match 'never)
  ;; Don't use company in the following modes
  (company-global-modes '(not shell-mode eaf-mode))
  ;; Trigger completion immediately.
  (company-idle-delay 0.1)
  ;; Number the candidates (use M-1, M-2 etc to select completions).
  (company-show-numbers t)
  :config
  (defun smarter-tab-to-complete ()
    "Try to `org-cycle', `yas-expand', and `yas-next-field' at current cursor position.

If all failed, try to complete the common part with `company-complete-common'"
    (interactive)
    (when yas-minor-mode
      (let ((old-point (point))
            (old-tick (buffer-chars-modified-tick))
            (func-list
             (if (equal major-mode 'org-mode) '(org-cycle yas-expand yas-next-field)
               '(yas-expand yas-next-field))))
        (catch 'func-suceed
          (dolist (func func-list)
            (ignore-errors (call-interactively func))
            (unless (and (eq old-point (point))
                         (eq old-tick (buffer-chars-modified-tick)))
              (throw 'func-suceed t)))
          (company-complete-common))))))
#+end_src

*** Company Box
[[https://github.com/sebastiencs/company-box][Company Box]] is a company front-end with icons.
#+begin_src emacs-lisp
(use-package company-box
  :if (display-graphic-p)
  :defines company-box-icons-all-the-icons
  :hook (company-mode . company-box-mode)
  :custom
  (company-box-backends-colors nil)
  (company-box-doc-delay 0.1)
  (company-box-doc-frame-parameters '((internal-border-width . 1)
                                      (left-fringe . 3)
                                      (right-fringe . 3)))
  :config
  (with-no-warnings
    ;; Prettify icons
    (defun my-company-box-icons--elisp (candidate)
      (when (or (derived-mode-p 'emacs-lisp-mode) (derived-mode-p 'lisp-mode))
        (let ((sym (intern candidate)))
          (cond ((fboundp sym) 'Function)
                ((featurep sym) 'Module)
                ((facep sym) 'Color)
                ((boundp sym) 'Variable)
                ((symbolp sym) 'Text)
                (t . nil)))))
    (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp)

    ;; Credits to Centaur for these configurations
    ;; Display borders and optimize performance
    (defun my-company-box--display (string on-update)
      "Display the completions."
      (company-box--render-buffer string on-update)

      (let ((frame (company-box--get-frame))
            (border-color (face-foreground 'font-lock-comment-face nil t)))
        (unless frame
          (setq frame (company-box--make-frame))
          (company-box--set-frame frame))
        (company-box--compute-frame-position frame)
        (company-box--move-selection t)
        (company-box--update-frame-position frame)
        (unless (frame-visible-p frame)
          (make-frame-visible frame))
        (company-box--update-scrollbar frame t)
        (set-face-background 'internal-border border-color frame)
        (when (facep 'child-frame-border)
          (set-face-background 'child-frame-border border-color frame)))
      (with-current-buffer (company-box--get-buffer)
        (company-box--maybe-move-number (or company-box--last-start 1))))
    (advice-add #'company-box--display :override #'my-company-box--display)

    (defun my-company-box-doc--make-buffer (object)
      (let* ((buffer-list-update-hook nil)
             (inhibit-modification-hooks t)
             (string (cond ((stringp object) object)
                           ((bufferp object) (with-current-buffer object (buffer-string))))))
        (when (and string (> (length (string-trim string)) 0))
          (with-current-buffer (company-box--get-buffer "doc")
            (erase-buffer)
            (insert (propertize "\n" 'face '(:height 0.5)))
            (insert string)
            (insert (propertize "\n\n" 'face '(:height 0.5)))

            ;; Handle hr lines of markdown
            ;; @see `lsp-ui-doc--handle-hr-lines'
            (with-current-buffer (company-box--get-buffer "doc")
              (let (bolp next before after)
                (goto-char 1)
                (while (setq next (next-single-property-change (or next 1) 'markdown-hr))
                  (when (get-text-property next 'markdown-hr)
                    (goto-char next)
                    (setq bolp (bolp)
                          before (char-before))
                    (delete-region (point) (save-excursion (forward-visible-line 1) (point)))
                    (setq after (char-after (1+ (point))))
                    (insert
                     (concat
                      (and bolp (not (equal before ?\n)) (propertize "\n" 'face '(:height 0.5)))
                      (propertize "\n" 'face '(:height 0.5))
                      (propertize " "
                                  'display '(space :height (1))
                                  'company-box-doc--replace-hr t
                                  'face `(:background ,(face-foreground 'font-lock-comment-face)))
                      (propertize " " 'display '(space :height (1)))
                      (and (not (equal after ?\n)) (propertize " \n" 'face '(:height 0.5)))))))))

            (setq mode-line-format nil
                  display-line-numbers nil
                  header-line-format nil
                  show-trailing-whitespace nil
                  cursor-in-non-selected-windows nil)
            (current-buffer)))))
    (advice-add #'company-box-doc--make-buffer :override #'my-company-box-doc--make-buffer)

    ;; Display the border and fix the markdown header properties
    (defun my-company-box-doc--show (selection frame)
      (cl-letf (((symbol-function 'completing-read) #'company-box-completing-read)
                (window-configuration-change-hook nil)
                (inhibit-redisplay t)
                (display-buffer-alist nil)
                (buffer-list-update-hook nil))
        (-when-let* ((valid-state (and (eq (selected-frame) frame)
                                       company-box--bottom
                                       company-selection
                                       (company-box--get-frame)
                                       (frame-visible-p (company-box--get-frame))))
                     (candidate (nth selection company-candidates))
                     (doc (or (company-call-backend 'quickhelp-string candidate)
                              (company-box-doc--fetch-doc-buffer candidate)))
                     (doc (company-box-doc--make-buffer doc)))
          (let ((frame (frame-local-getq company-box-doc-frame))
                (border-color (face-foreground 'font-lock-comment-face nil t)))
            (unless (frame-live-p frame)
              (setq frame (company-box-doc--make-frame doc))
              (frame-local-setq company-box-doc-frame frame))
            (set-face-background 'internal-border border-color frame)
            (when (facep 'child-frame-border)
              (set-face-background 'child-frame-border border-color frame))
            (company-box-doc--set-frame-position frame)

            ;; Fix hr props. @see `lsp-ui-doc--fix-hr-props'
            (with-current-buffer (company-box--get-buffer "doc")
              (let (next)
                (while (setq next (next-single-property-change (or next 1) 'company-box-doc--replace-hr))
                  (when (get-text-property next 'company-box-doc--replace-hr)
                    (put-text-property next (1+ next) 'display
                                       '(space :align-to (- right-fringe 1) :height (1)))
                    (put-text-property (1+ next) (+ next 2) 'display
                                       '(space :align-to right-fringe :height (1)))))))

            (unless (frame-visible-p frame)
              (make-frame-visible frame))))))
    (advice-add #'company-box-doc--show :override #'my-company-box-doc--show)

    (defun my-company-box-doc--set-frame-position (frame)
      (-let* ((frame-resize-pixelwise t)

              (box-frame (company-box--get-frame))
              (box-position (frame-position box-frame))
              (box-width (frame-pixel-width box-frame))
              (box-height (frame-pixel-height box-frame))
              (box-border-width (frame-border-width box-frame))

              (window (frame-root-window frame))
              ((text-width . text-height) (window-text-pixel-size window nil nil
                                                                  (/ (frame-pixel-width) 2)
                                                                  (/ (frame-pixel-height) 2)))
              (border-width (or (alist-get 'internal-border-width company-box-doc-frame-parameters) 0))

              (x (- (+ (car box-position) box-width) border-width))
              (space-right (- (frame-pixel-width) x))
              (space-left (car box-position))
              (fringe-left (or (alist-get 'left-fringe company-box-doc-frame-parameters) 0))
              (fringe-right (or (alist-get 'right-fringe company-box-doc-frame-parameters) 0))
              (width (+ text-width border-width fringe-left fringe-right))
              (x (if (> width space-right)
                     (if (> space-left width)
                         (- space-left width)
                       space-left)
                   x))
              (y (cdr box-position))
              (bottom (+ company-box--bottom (frame-border-width)))
              (height (+ text-height (* 2 border-width)))
              (y (cond ((= x space-left)
                        (if (> (+ y box-height height) bottom)
                            (+ (- y height) border-width)
                          (- (+ y box-height) border-width)))
                       ((> (+ y height) bottom)
                        (- (+ y box-height) height))
                       (t y))))
        (set-frame-position frame (max x 0) (max y 0))
        (set-frame-size frame text-width text-height t)))
    (advice-add #'company-box-doc--set-frame-position :override #'my-company-box-doc--set-frame-position))

  (when (require 'all-the-icons nil t)
    (declare-function all-the-icons-faicon 'all-the-icons)
    (declare-function all-the-icons-material 'all-the-icons)
    (declare-function all-the-icons-octicon 'all-the-icons)
    (setq company-box-icons-all-the-icons
          `((Unknown . ,(all-the-icons-material "find_in_page" :height 1.0 :v-adjust -0.2))
                        (Text . ,(all-the-icons-faicon "text-width" :height 1.0 :v-adjust -0.02))
                        (Method . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
                        (Function . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
                        (Constructor . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
                        (Field . ,(all-the-icons-octicon "tag" :height 1.1 :v-adjust 0 :face 'all-the-icons-lblue))
                        (Variable . ,(all-the-icons-octicon "tag" :height 1.1 :v-adjust 0 :face 'all-the-icons-lblue))
                        (Class . ,(all-the-icons-material "settings_input_component" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
                        (Interface . ,(all-the-icons-material "share" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
                        (Module . ,(all-the-icons-material "view_module" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
                        (Property . ,(all-the-icons-faicon "wrench" :height 1.0 :v-adjust -0.02))
                        (Unit . ,(all-the-icons-material "settings_system_daydream" :height 1.0 :v-adjust -0.2))
                        (Value . ,(all-the-icons-material "format_align_right" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
                        (Enum . ,(all-the-icons-material "storage" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
                        (Keyword . ,(all-the-icons-material "filter_center_focus" :height 1.0 :v-adjust -0.2))
                        (Snippet . ,(all-the-icons-material "format_align_center" :height 1.0 :v-adjust -0.2))
                        (Color . ,(all-the-icons-material "palette" :height 1.0 :v-adjust -0.2))
                        (File . ,(all-the-icons-faicon "file-o" :height 1.0 :v-adjust -0.02))
                        (Reference . ,(all-the-icons-material "collections_bookmark" :height 1.0 :v-adjust -0.2))
                        (Folder . ,(all-the-icons-faicon "folder-open" :height 1.0 :v-adjust -0.02))
                        (EnumMember . ,(all-the-icons-material "format_align_right" :height 1.0 :v-adjust -0.2))
                        (Constant . ,(all-the-icons-faicon "square-o" :height 1.0 :v-adjust -0.1))
                        (Struct . ,(all-the-icons-material "settings_input_component" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
                        (Event . ,(all-the-icons-octicon "zap" :height 1.0 :v-adjust 0 :face 'all-the-icons-orange))
                        (Operator . ,(all-the-icons-material "control_point" :height 1.0 :v-adjust -0.2))
                        (TypeParameter . ,(all-the-icons-faicon "arrows" :height 1.0 :v-adjust -0.02))
                        (Template . ,(all-the-icons-material "format_align_left" :height 1.0 :v-adjust -0.2)))
          company-box-icons-alist 'company-box-icons-all-the-icons)))
#+end_src

** QuickRun
[[https://github.com/emacsorphanage/quickrun][QuickRun]] compiles and runs source code quickly.
#+begin_src emacs-lisp
(use-package quickrun
  :custom
  (quickrun-timeout-seconds 60)
  :bind
  (("<f5>" . quickrun)
   ("M-<f5>" . quickrun-shell)
   ("C-c e" . quickrun)
   ("C-c C-e" . quickrun-shell)))
#+end_src

** Evil Nerd Commenter
[[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] (un)comments lines efficiently.
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind
   (("s-/" . evilnc-comment-or-uncomment-lines)))
#+end_src

** Web Development
*** Web Mode
[[https://github.com/fxbois/web-mode][Web mode]], a major mode for editing web templates.
#+begin_src emacs-lisp
(use-package web-mode)
#+end_src

*** JS2 Mode
[[https://github.com/mooz/js2-mode][JS2 mode]] improves JavsScript editing mode.
#+begin_src emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :custom
  (js2-strict-missing-semi-warning nil)
  :interpreter "node")
#+end_src

*** Vue Mode
#+begin_src emacs-lisp
(use-package vue-mode
  :mode "\\.vue\\'"
  :commands (vue-mode))
#+end_src

*** Emmet
#+begin_src emacs-lisp
(use-package emmet-mode
  :hook ((web-mode . emmet-mode)
         (css-mode . emmet-mode)))
#+end_src

* Data Format
** YAML
[[https://yaml.org/][YAML]] is a human friendly data serialization language for all programming languages.
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode
  (("\\.yaml\\'" . yaml-mode)
   ("\\.yml\\'" . yaml-mode)))
#+end_src

** JSON
[[https://json.org][JSON]] (JavaScript Object Notation) is a lightweight data-interchange format. 
#+begin_src emacs-lisp
(use-package json-mode
  :defer t)
#+end_src

* Version Control
** Magit
# TODO: auto save file(s) when calling magit
[[https://github.com/magit/magit][Magit]] is an interface for [[https://git-scm.com/][Git]] inside Emacs.
#+begin_src emacs-lisp
(use-package magit
  :bind
  (("s-k" . magit)
   :map transient-base-map
   ("<escape>" . transient-quit-one))
  :custom
  (magit-diff-refine-hunk t)
  ;; Disable ulgy bitmap in fringe in magit mode.
  (magit-section-visibility-indicator nil))
#+end_src

** Git Modes
[[https://github.com/magit/git-modes/][git-modes]] is Emacs major modes for Git configuration files.
#+begin_src emacs-lisp
(use-package git-modes
  :defer t)
#+end_src

** Diff HL
[[https://github.com/dgutov/diff-hl][diff-hl]] highlights uncommitted changes in the left fringe.
#+begin_src emacs-lisp
(use-package diff-hl
  :init
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  :config
  (global-diff-hl-mode)
  ;; Highlight changes on editing.
  (diff-hl-flydiff-mode)
  ;; Makes fringe and margin react to mouse clicks to show the curresponding hunk.
  (diff-hl-show-hunk-mouse-mode)
  :custom
  (diff-hl-draw-borders nil)
  :custom-face
  (diff-hl-change ((t (:background "#8fe9e3"))))
  (diff-hl-insert ((t (:background "#80f1a4"))))
  (diff-hl-delete ((t (:background "#f5cce1")))))
#+end_src

* Terminal Emulator
** Exec Path From Shell
# FIX: git XDG path not working.
[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] ensures environment variables inside Emacs look the same as in the user's shell.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+end_src

** Vterm
# FIX: Word wrap is not normal
# FIX: gray color for zsh auto-suggesstion
[[https://github.com/akermu/emacs-libvterm][Vterm]] is fully capable, fast, and it can seamlessly handle large outputs.
#+begin_src emacs-lisp
(use-package vterm
  :bind
  (:map vterm-mode-map
   ("s-k"       . vterm-clear)
   ("<s-left>"  . vterm-send-C-a)
   ("<s-right>" . vterm-send-C-e)
   ("C-c"       . vterm-send-C-c))
  :custom
  (vterm-always-compile-module t)
  :custom-face
  (term-color-blue ((t (:background "blue2" :foreground "mac:linkColor"))))
  (term-color-red ((t (:background "red3" :foreground "red"))))
  (term-color-yellow ((t (:background "yellow3" :foreground "orange"))))
  :init
  ;; Toggle vterm open and hide with Control + `
  (defun vterm-toggle ()
    (interactive)
    (if (eq major-mode 'vterm-mode)
        (previous-buffer)
      (vterm)))

  (bind-key (kbd "C-`") 'vterm-toggle)
  :config
  ;; Disable evil mode for vterm.
  (evil-set-initial-state 'vterm-mode 'emacs)
  ;; Close vterm buffer without confriming.
  (setq kill-buffer-query-functions nil))
#+end_src

* Chinese Optimization
# TODO: Slipt word https://github.com/cireu/jieba.el or use https://developer.apple.com/documentation/corefoundation/cfstringtokenizer-rf8
** Font
Use macOS's default Chinese font for Chinese characters in Emacs.
According to:  https://support.apple.com/en-us/guide/pages/tanfbd4156e/mac
#+begin_src emacs-lisp
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil 'font)
                    charset (font-spec :family "PingFang SC")))
#+end_src

** Display
Break lines normally for Chinese characters in visual line mode.
#+begin_src emacs-lisp
;; This will work until emacs 28.1
;; (setq word-wrap-by-category t)
#+end_src

# FIX: Performance is lack.
# FIX: Not align on org indent mode.
[[https://github.com/casouri/valign][valign]] can properly align tables containing variable-pitch font, CJK characters and images.
#+begin_src emacs-lisp
(use-package valign
  :hook
  (org-mode . valign-mode)
  (markdown-mode . valign-mode)
  :config
  (setq valign-max-table-size 10000)
  (setq valign-fancy-bar 1))
#+end_src

** Search
[[https://github.com/cute-jumper/pinyinlib.el][Pinyinlib]] is a elisp library for converting first letter of Pinyin to Simplified/Traditional Chinese characters.
#+begin_src emacs-lisp
(use-package pinyinlib)
#+end_src

[[https://github.com/laishulu/evil-pinyin][evil-pinyin]]: Search Chinese characters with the first letter of Pinyin.
#+begin_src emacs-lisp
(use-package evil-pinyin
  :config
  (evil-select-search-module 'evil-search-module 'evil-search)
  (global-evil-pinyin-mode))
#+end_src

[[https://github.com/pengpengxp/swiper/wiki/ivy-support-chinese-pinyin][ivy-support-chinese-pinyin]] Support Chinese pinyin match, start with !.
#+begin_src emacs-lisp
(load-file "~/.config/emacs/elisp/ivy-chinese-pinyin.el")
#+end_src


[[https://github.com/cute-jumper/ace-pinyin][ace-pinyin]] make you jump to Chinese character by pinyin with avy.
#+begin_src emacs-lisp
(use-package ace-pinyin
  :config
  (ace-pinyin-global-mode t))
#+end_src

** Input Method
[[https://github.com/laishulu/emacs-smart-input-source][sis]] can auto switch to English input method and save the previous input method when entering Evil normal mode, restore the saved input method when switching back to Evil insert mode.
# FIX: Check evil state and set input method when refousing Emacs.
# FIX: sis-context-mode cannot detect org mode heading correctly.
#+begin_src emacs-lisp
(use-package sis
  :config
  (sis-ism-lazyman-config
   "com.apple.keylayout.ABC"
   "com.apple.inputmethod.SCIM.ITABC")
  (sis-global-respect-mode t)
  (sis-global-context-mode t)
  ;; Improve typing fluency experience.
  (set-language-environment "UTF-8"))
#+end_src

** Keybindings
Make keybindings work under Chinese input method.

| Keybindings | Chinese Keybindings | Features              |
|-------------+---------------------+-----------------------|
| ~Command + [~ | ~Command + 】~        | Go to previous Buffer |
| ~Command + ]~ | ~Command + 【~        | Go to next Buffer     |
| ~Command + ,~ | ~Command + ，~        | Open config file      |
| ~Command + ,~ | ~Command + 。~        | Reload init file      |
| ~Control + ·~ | ~Control + `~         | Toggle vterm          |

#+begin_src emacs-lisp
(define-key key-translation-map (kbd "s-【") (kbd "s-["))
(define-key key-translation-map (kbd "s-】") (kbd "s-]"))
(define-key key-translation-map (kbd "s-，") (kbd "s-,"))
(define-key key-translation-map (kbd "s-。") (kbd "s-."))
(define-key key-translation-map (kbd "C-·") (kbd "C-`"))
;; (define-key key-translation-map (kbd "M-·") (kbd "M-`"))
#+end_src

