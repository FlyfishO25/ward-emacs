* Package Manager
** Proxy
Set http(s) proxy for Emacs. /You might not need it, or need to change it./
#+begin_src emacs-lisp
(setenv "https_proxy" "http://127.0.0.1:7890")
(setenv "http_proxy" "http://127.0.0.1:7890") 
#+end_src

** Package
Compile external packages for [[https://www.emacswiki.org/emacs/GccEmacs][GccEmacs]].
#+begin_src emacs-lisp
(setq package-native-compile t)
#+end_src

Configure package.el to include MELPA.
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
#+end_src

** Use Package
[[https://github.com/jwiegley/use-package][Use Package]] allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy.

Always ensure the package is installed.
Ensure that use-package is installed. If use-package isn't already installed, it's extremely likely that this is a fresh installation! So we'll want to update the package repository and install use-package before loading the literate configuration.
#+begin_src emacs-lisp
(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src

The ~:ensure~ keyword causes the package(s) to be installed automatically if not already present on your system, it won't affect local packages. Enable ~:ensure t~ to be global for all packages.
#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.
#+begin_src emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)
#+end_src

Keep the packages up to date.
#+begin_src emacs-lisp
(use-package auto-package-update
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+end_src

** Straight
[[https://github.com/raxod502/straight.el][straight]]: next-generation, purely functional package manager for the Emacs hacker.

* Basic UI
** Title Bar
# FIX: Doesn't show folder path in dired.
# FIX: Doesn't show file icon when file is in iCloud.
Show icon and full path in title bar.
#+begin_src emacs-lisp
(setq frame-title-format
    '(:eval
       (if buffer-file-name
           (abbreviate-file-name buffer-file-name)
           "%b")))
#+end_src

** Tool Bar
Disable tool bar.
#+begin_src emacs-lisp
(tool-bar-mode 0)
#+end_src

** Tab Bar
https://www.emacswiki.org/emacs/TabBarMode
https://github.com/manateelazycat/awesome-tab
https://github.com/ema2159/centaur-tabs

** Scroll Bar
Disable scroll bar.
#+begin_src emacs-lisp
(scroll-bar-mode 0)
#+end_src

** Side Bar
https://github.com/Alexander-Miller/treemacs

** Gutter
https://github.com/emacsorphanage/git-gutter

** Fringe
Enable left fringe.
#+begin_src emacs-lisp
(fringe-mode '(10 . 0))
#+end_src

** Line Number
Default line number width with 3 characters.
#+begin_src emacs-lisp
(setq-default display-line-numbers-width 3)
#+end_src

Display relative line numbers on text mode and code mode.
#+begin_src emacs-lisp
(setq-default display-line-numbers-type 'relative
              display-line-numbers-current-absolute t)
(add-hook 'text-mode-hook #'display-line-numbers-mode)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

** Color Theme
Use default color theme.

*** Programming face
#+begin_src emacs-lisp
(set-face-foreground 'font-lock-function-name-face "DodgerBlue")
;; (set-face-foreground 'font-lock-variable-name-face "#1E90FF")
(set-face-foreground 'font-lock-keyword-face "#874bf8")
(set-face-foreground 'font-lock-comment-face "DarkGray")
;; (set-face-foreground 'font-lock-type-face "#1E90FF")
;; (set-face-foreground 'font-lock-constant-face "#1E90FF")
;; (set-face-foreground 'font-lock-builtin-face "#1E90FF")
;; (set-face-foreground 'font-lock-string-face "#1E90FF")
#+end_src

*** Markup face
#+begin_src emacs-lisp
(set-face-foreground 'outline-4 "Firebrick")
#+end_src

**** Org Mode
#+begin_src emacs-lisp
(set-face-foreground 'org-meta-line "Gray")
(set-face-foreground 'org-drawer "Gray")
(set-face-foreground 'org-document-info-keyword "Gray")
(set-face-foreground 'org-date "Gray")
#+end_src

**** Markdown


*** Components Face

** Mode Line
# TODO: Simple Modeline Row: Column, Scroll Position, Git
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1))
(setq doom-modeline-buffer-encoding nil)
(setq doom-modeline-indent-info t)
(setq column-number-mode t)
(dolist (modeline-face '(
      doom-modeline-buffer-path
      doom-modeline-buffer-file
      doom-modeline-project-dir
      doom-modeline-buffer-modified
      doom-modeline-buffer-major-mode
      doom-modeline-info))
  (set-face-attribute modeline-face nil :weight 'light))
#+end_src

Hide file icon and file name in mode line.
#+begin_src emacs-lisp
(doom-modeline-def-segment buffer-info
  "buffer info segment."
  "")
(doom-modeline-def-segment buffer-info-simple
  "simple buffer info segment."
  "")
#+end_src

Hide all icons in mode line.
#+begin_src emacs-lisp
(setq doom-modeline-icon nil)
#+end_src

Hide Evil state in modeline.
#+begin_src emacs-lisp
(setq evil-normal-state-tag ""
      evil-insert-state-tag ""
      evil-visual-state-tag ""
      evil-motion-state-tag ""
      evil-emacs-state-tag ""
      evil-operator-state-tag "")
#+end_src

Set modeline height to font size 18 * 2 = 36.\\
It won't hide part of the line while scrolling.
#+begin_src emacs-lisp
(setq doom-modeline-height 36)
#+end_src

Count column number from 1 instead of 0.
#+begin_src emacs-lisp
(setq column-number-indicator-zero-based nil)
#+end_src

* Basic UX
** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] displays available keybindings in popup.
#+begin_src emacs-lisp
(use-package which-key)
(which-key-mode)
#+end_src

** Ivy
# TODO: remember command history.
[[https://github.com/abo-abo/swiper][Ivy]] is a generic completion front-end.
#+begin_src emacs-lisp
(use-package counsel
  :bind
  ("M-x" . 'counsel-M-x)

  :config
  (use-package flx)
  (use-package smex)

  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
        '((swiper . ivy--regex-plus)
          (t . ivy--regex-fuzzy))))
#+end_src

*** Ivy Rich
[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds description to the command in =M-x=.
#+begin_src emacs-lisp
(use-package ivy-rich)
(ivy-rich-mode 1)
#+end_src

* Window Management
** Session
[[https://github.com/iqbalansari/restart-emacs][restart-emacs]] offers a command =restart-emacs=.
#+begin_src emacs-lisp
(use-package restart-emacs)
#+end_src

** Frame
# TODO: Make the buffers independent in each frame.
# TODO: System-wide popup Emacs windows for quick edits
*** Keybindings
=Ctrl + Command + F=: Set window full screen.
#+begin_src emacs-lisp
(global-set-key (kbd "C-s-f") 'toggle-frame-fullscreen)
#+end_src

=Command + Q=: Quit Emacs.
#+begin_src emacs-lisp
(global-set-key (kbd "s-q") 'save-buffers-kill-emacs)
#+end_src

=Command + N=: Create new window, default with org-mode and evil-mode
#+begin_src emacs-lisp
(global-set-key (kbd "s-n") 'new-empty-frame)

(defun new-empty-frame ()
  "Create a new frame with a new empty buffer. With org-mode and evil-mode enabled."
  (interactive)
  (let ((buffer (generate-new-buffer "untitled")))
    (set-buffer buffer)
    (org-mode)
    (evil-mode 1)
    (display-buffer buffer '(display-buffer-pop-up-frame . nil))))
#+end_src

=Shift + Command + W=: Close current window.
#+begin_src emacs-lisp
(global-set-key (kbd "s-W") 'delete-frame)
#+end_src

*** Behavior
Associate [[https://github.com/willbchang/alfred-open-in-editor][alfred-open-in-editor]] to open folder in a new frame by ~emacsclient~.
#+begin_src emacs-lisp
(server-start)
#+end_src

** Buffer
*** Keybindings
| Keybindings | Features              |
|-------------+-----------------------|
| ~Command + W~ | Close Current Buffer  |
| ~Command + [~ | Go to previous Buffer |
| ~Command + ]~ | Go to next Buffer     |
| ~Command + T~ | Create New Buffer     |
| ~Command + S~ | Save Buffer           |
| ~Command + R~ | Revert Buffer         |
| ~Command + '~ | Move to next Buffer   |
| ~Command + ,~ | Open Preferences      |

#+begin_src emacs-lisp
(global-set-key (kbd "s-w") 'kill-this-buffer)
(global-set-key (kbd "s-[") 'previous-buffer)
(global-set-key (kbd "s-]") 'next-buffer)
(global-set-key (kbd "s-t") 'new-empty-buffer)
(global-set-key (kbd "s-s") 'save-buffer)
(global-set-key (kbd "s-r") 'revert-buffer-no-confirm)
(global-set-key (kbd "s-'") 'other-window)
(global-set-key (kbd "s-,") 'open-config-file)
#+end_src

# http://ergoemacs.org/emacs/emacs_new_empty_buffer.html
#+begin_src emacs-lisp
(defun new-empty-buffer ()
  "Create a new empty buffer.
New buffer will be named “untitled” or “untitled<2>”, “untitled<3>”, etc."
  (interactive)
  (let (($buffer (generate-new-buffer "untitled")))
    (switch-to-buffer $buffer)
    (funcall initial-major-mode)
    (setq buffer-offer-save t)
    $buffer))

(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive)
  (save-buffer t)
  (revert-buffer t t)
  (message "Reverted `%s'" (buffer-name)))

(defun open-config-file ()
  (interactive)
  (find-file "~/.config/emacs/config.org"))

(defun reload-init-file ()
  (interactive)
  (load-file user-init-file))
#+end_src

*** Behaviors
Save files automatically.
#+begin_src emacs-lisp
(auto-save-visited-mode 1)
#+end_src

Ensure files end with newline.
#+begin_src emacs-lisp
(setq require-final-newline t)
#+end_src

Revert (update) buffers automatically when underlying files are changed externally.
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

Disable startup screen.
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src

Empty scratch file on init.
#+begin_src emacs-lisp
(setq initial-scratch-message nil)
#+end_src

Set initial buffer mode to org-mode.
#+begin_src emacs-lisp
(setq-default initial-major-mode 'org-mode)
#+end_src

Save cursor position for each file.
#+begin_src emacs-lisp
(save-place-mode t)
#+end_src

Save/Restore opened files and windows configuration.
#+begin_src emacs-lisp
(desktop-save-mode 1)
#+end_src

Cancel partially typed or accidental command.
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+end_src

Ask =y= or =n= instead of =yes= or =no=. Use ~return~ to act ~y~.
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(define-key y-or-n-p-map (kbd "RET") 'act)
#+end_src

Disable the ring bell when scroll beyond the document.
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

When you double-click on a file in the Mac Finder open it as a buffer in the existing Emacs frame, rather than creating a new frame just for that file.
#+begin_src emacs-lisp
(setq ns-pop-up-frames nil)
#+end_src

Ignore buffers start with * while moving to previous or next buffer.
# https://emacs.stackexchange.com/a/27770/29493
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'buffer-predicate
  (lambda (buf) (not (string-match-p "^*" (buffer-name buf)))))
#+end_src
* Word Processing
# TODO: Diff text
# TODO: company for elisp, especially for completion emacs functions/variables
# TODO: Edit comment or string/docstring or code block inside them in separate buffer with your favorite mode https://github.com/twlz0ne/separedit.el
** Basic Features
# TODO: Better comment
*** Displaying Text
**** Font
Use MacOS default font SF Mono.
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "SF Mono 18")
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "s-0") 'reset-font-size)
(global-set-key (kbd "s-=") 'text-scale-increase)
(global-set-key (kbd "s--") 'text-scale-decrease)

(defun reset-font-size ()
  (interactive)
  (text-scale-set 0))
#+end_src

**** Behaviors
Highlight urls and make them clickable.
#+begin_src emacs-lisp
;; This will work until emacs 28.1
;; (global-goto-address-mode 1)
(add-hook 'text-mode-hook 'goto-address-mode)
#+end_src

Highlight paired brackets, includes (), [], {} and so on...
#+begin_src emacs-lisp
(show-paren-mode 1)
(require 'paren)
(set-face-background 'show-paren-match (face-background 'default))
(set-face-foreground 'show-paren-match "#e2416c")
(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
#+end_src

Enable word wrap globally.
#+begin_src emacs-lisp
(global-visual-line-mode 1)
#+end_src

*** Moving Cursor
Make =Command + ArrowKey= behaves like MacOS app.
- =Command + ↑=: move to the top of the file.
- =Command + ↓=: move to the bottom of the file.
- =Command + ←=: move to the beginning of the line.
- =Command + →=: move to the end of the line.
- =Command + L=: go to line.
#+begin_src emacs-lisp
(global-set-key (kbd "s-<up>") 'beginning-of-buffer)
(global-set-key (kbd "s-<down>") 'end-of-buffer)
(global-set-key (kbd "s-<right>") 'move-end-of-line)
(global-set-key (kbd "s-<left>") 'move-beginning-of-line)
(global-set-key (kbd "s-l") 'goto-line)
#+end_src

*** Searching Text
- =Command + F=: Search text.
# TODO: - =Shift + Command + F=: Search text in current folder.
#+begin_src emacs-lisp
(global-set-key (kbd "s-f") 'swiper)
;; (global-set-key (kbd "s-F") 'isearch-backward)
#+end_src

*** Selecting Text
=Command + A=: Select all the content in current file.
#+begin_src emacs-lisp
(global-set-key (kbd "s-a") 'mark-whole-buffer)
#+end_src

**** Behaviors
Highlight region with pink color.
#+begin_src emacs-lisp
(set-face-attribute 'region nil :background "#f5cce1")
#+end_src
*** Editing Text
**** Keybindings
- =Command + C=: Copy text.
- =Command + X=: Cut text.
- =Command + V=: Paste text.
#+begin_src emacs-lisp
(global-set-key (kbd "s-c") 'kill-ring-save)
(global-set-key (kbd "s-x") 'kill-region)
(global-set-key (kbd "s-v") 'yank)
#+end_src

=Command + Return=: Force newline.
#+begin_src emacs-lisp
(global-set-key (kbd "<s-return>") 'newline)
#+end_src

=Command + Backspace=: Delete current line from cursor to the beginning
#+begin_src emacs-lisp
(global-set-key (kbd "s-<backspace>") 'backward-kill-line)

(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))
#+end_src

=Command + Shift + Backspace=: Delete whole line entirely.\\
/This is not the default behavior of MacOS, but I found it's useful./
#+begin_src emacs-lisp
(global-set-key (kbd "s-S-<backspace>") 'kill-whole-line)
#+end_src


# TODO:
# 1. Comment on empty line, it adds (e.g.) and put the cursor behind
# 2. Comment one line, it adds before and forward one line
# 3. Comment on region, it add and move to the next line of the region
# 4. Cannot uncomment inside org mode code block
=Command + /=: Comment/Uncomment line(s).
#+begin_src emacs-lisp
(global-set-key (kbd "s-/") 'comment-or-uncomment-region-or-line)

(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if
there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))
#+end_src
**** Undo
Increase undo limit.
#+begin_src emacs-lisp
;; default is 160000
(setq undo-limit 800000)
;; default is 240000
(setq undo-strong-limit 12000000)
;; default is 24000000
(setq undo-outer-limit 120000000)
#+end_src

***** Undo Fu
# Split and move to editing text
[[https://gitlab.com/ideasman42/emacs-undo-fu][Undo Fu]] is a simple, stable linear undo with redo.
#+begin_src emacs-lisp
(use-package undo-fu)

(global-set-key (kbd "s-z")   'undo-fu-only-undo)
(global-set-key (kbd "s-Z") 'undo-fu-only-redo)
#+end_src

[[https://gitlab.com/ideasman42/emacs-undo-fu-session][Undo fu session]] writes undo/redo information upon file save which is restored where possible when the file is loaded again.
#+begin_src emacs-lisp
(use-package undo-fu-session
  :config
  (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))

(global-undo-fu-session-mode)
#+end_src
 
**** Behaviors
Auto pair brackets, quotes etc.
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

Overwrite selection on pasting.
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

Indent with 2 space.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)
#+end_src

** Vim Emulator
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  :custom
  ; Use native keybindings on insert state.
  (evil-disable-insert-state-bindings t))
#+end_src

*** Behaviors
# TODO: Remove evil search highlight with ESC
Unbind =return= key in for using it to open link in org mode.
#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "RET") nil))

(setq org-return-follows-link t)
#+end_src

Set Evil cursor color and styles in different situations.
You can try these commands independently to test the effects: =Esc, i, v, d, r=
#+begin_src emacs-lisp
(setq evil-normal-state-cursor '(box "#e2416c")
      evil-insert-state-cursor '(bar "#e2416c")
      evil-visual-state-cursor '(hollow "#e2416c")
      evil-operator-state-cursor '(evil-half-cursor "#e2416c")
      evil-replace-state-cursor '(hbar "#e2416c"))
#+end_src

Set default cursor style to bar when evil use emacs state.
#+begin_src emacs-lisp
(setq-default evil-emacs-state-cursor 'bar)
#+end_src

Records changes to separate undo instead of a big one in insert state.
#+begin_src emacs-lisp
(setq evil-want-fine-undo t)
#+end_src

*** Evil Collection
[[https://github.com/emacs-evil/evil-collection][evil-collection]], which provides evil-friendly bindings for many modes.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list
        '(dired magit which-key))
  (evil-collection-init))
#+end_src

*** Evil Surround
[[https://github.com/emacs-evil/evil-surround][evil-surround]] makes surround text with paired symbols easily.
#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src

*** Evil Snip
[[https://github.com/hlissner/evil-snipe][Evil Snip]] enables 2-char searching, incremental highlighting, repeat searches with =f=, =F=, =t= and =T=.
#+begin_src emacs-lisp
(use-package evil-snipe)
(evil-snipe-mode +1)
(evil-snipe-override-mode +1)
#+end_src

*** Evil Goggles
[[https://github.com/edkolev/evil-goggles][Evil Goggles]] displays visual hint on evil edit operations.
#+begin_src emacs-lisp
(use-package evil-goggles
  :ensure t
  :config
  (evil-goggles-mode)

  ;; optionally use diff-mode's faces; as a result, deleted text
  ;; optionally use diff-mode's faces; as a result, deleted text
  ;; will be highlighed with `diff-removed` face which is typically
  ;; some red color (as defined by the color theme)
  ;; other faces such as `diff-added` will be used for other actions
  (evil-goggles-use-diff-faces))
#+end_src

*** Undo Fu
Setup undo fu for evil.
#+begin_src emacs-lisp
(define-key evil-normal-state-map "u" 'undo-fu-only-undo)
(define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)
#+end_src

** Multiple Cursor
https://github.com/hlissner/evil-multiedit
https://github.com/gabesoft/evil-mc
https://github.com/syl20bnr/evil-iedit-state
https://github.com/magnars/multiple-cursors.el

** Spell and Grammar
# TODO: Check grammar
Check spelling of words in text mode, required =ispell=.
#+begin_src emacs-lisp
(use-package flyspell
  :config
  (setq ispell-program-name "enchant-2")
  (add-hook 'text-mode-hook 'flyspell-mode))
#+end_src

** Keybinding References
*Keybinding Values*:
| Meaning | Emacs Key Value | MacOS Key           |
|---------+-----------------+---------------------|
| Control | =C=               | =Control(Ctrl)=       |
| Meta    | =M=               | =Option(Alt)=         |
| Super   | =s=               | =Command=             |
| Shift   | =S=               | =Shift=               |
| -       | =s-z=             | =Command + Z=         |
| -       | =s-Z=             | =Command + Shift + Z= |

*Keybinding Functions*: [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Reference]]
- =(define-key KEYMAP KEY DEF)=: Defines a key against a keyboard map. Use this if you want to change a keymap that isn’t the current buffer map.
- =(local-set-key KEY COMMAND)=: Binds a key to the local keymap used by the active buffer, unlike define-key which takes an explicit keymap to bind a key against.
- =(local-unset-key KEY)=: Removes KEY from the active, local keymap.
- =(global-set-key KEY COMMAND)=: Binds a key to the global keymap, making it available in all buffers (with a caveat – see below.)
- =(global-unset-key KEY)=: Removes KEY from the global keymap

*Keybinding Value Styles*:
- =(kbd "s-Z")=
- ~"s-Z"~
- ~[s-Z]~

* Markup Language
# TODO: LaTex Support
** Org Mode
# TODO: org render code block with hiding begin & end
# TODO: org latex
# TODO: Enable partial horizontal scroll in Emacs: https://github.com/misohena/phscroll
# TODO: Smooth scrolling over images in Emacs
# TODO: Preview equations live in org-mode
# TODO: org roam
# FIX: Make not*Bold*AtAll work!
# FIX: new line with unexpected 2 space indent.
[[https://orgmode.org/][Org]] is a highly flexible structured plain text file format.
*** Behaviors
Enable headline and subcontent in the indented view.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

Fold all contents on opening a org file.
#+begin_src emacs-lisp
(setq org-startup-folded t)
#+end_src

Hide emphasis makers.
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

Enable shift selection.
#+begin_src emacs-lisp
(setq org-support-shift-select 'always)
#+end_src

Disable reindent on every time editing code block.
#+begin_src emacs-lisp
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+end_src

Always display images.
#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src

Do not display image actual width.
#+begin_src emacs-lisp
(setq org-image-actual-width nil)
#+end_src
*** Org Superstar
[[https://github.com/integral-dw/org-superstar-mode][Org Superstar]] prettifies headings and plain lists in Org mode.
#+begin_src emacs-lisp
(use-package org-superstar
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-hide-leading-stars t))
#+end_src

Change org headlines' style to ~›~.
# TODO: 
#+begin_src emacs-lisp
(setq org-superstar-headline-bullets-list '("›"))
#+end_src

Change org unordered list styles.
#+begin_src emacs-lisp
(setq org-superstar-prettify-item-bullets t)
(setq org-superstar-item-bullet-alist '((?* . ?•)
                                        (?+ . ?•)
                                        (?- . ?•)))
#+end_src

*** Org Appear
[[https://github.com/awth13/org-appear][Org Appear]] toggles visibility of hidden Org mode element parts upon entering and leaving an element.
#+begin_src emacs-lisp
(use-package org-appear)
(add-hook 'org-mode-hook 'org-appear-mode)
(setq org-appear-autolinks t)
#+end_src

** Markdown Mode
# TODO: Markdown hide emphasis in Emacs
[[https://github.com/jrblevin/markdown-mode][Markdown]] allows you to write using an easy-to-read, easy-to-write plain text format.
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

Hide markup and urls.
#+begin_src emacs-lisp
(setq markdown-hide-markup t)
(setq markdown-hide-urls t)
#+end_src

* Terminal Emulator
** Exec Path From Shell
# FIX: git XDG path not working.
[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] ensures environment variables inside Emacs look the same as in the user's shell.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+end_src

** Vterm
# TODO: Open as a mini buffer
# TODO: Left marign
# TODO: No modeline
# TODO: Text Editing keybindings are not supported
# TODO: New term when calling vterm
# TODO: Native keybindings, no evil mode  
# FIX: Word wrap is not normal
[[https://github.com/akermu/emacs-libvterm][Vterm]] is fully capable, fast, and it can seamlessly handle large outputs.
#+begin_src emacs-lisp
(use-package vterm)
#+end_src

*** Behaviors
Disable evil mode for vterm.
#+begin_src emacs-lisp
(add-hook 'vterm-mode-hook 'evil-emacs-state)
#+end_src

Close vterm buffer without confriming.
#+begin_src emacs-lisp
(add-hook 'vterm-mode-hook
          (lambda () (setq kill-buffer-query-functions nil)))
#+end_src

*** Keybindings
# TODO: Open, focus and hide vterm instance, create new instance.
#+begin_src emacs-lisp
(define-key vterm-mode-map (kbd "s-k") 'vterm-clear)
#+end_src

* Version Control
** Magit
[[https://github.com/magit/magit][Magit]] is an interface for [[https://git-scm.com/][Git]] inside Emacs.
#+begin_src emacs-lisp
(use-package magit
  :bind
  ("s-k" . magit)
  :config
  (setq magit-diff-refine-hunk t))
#+end_src

** Diff HL
[[https://github.com/dgutov/diff-hl][diff-hl]] highlights uncommitted changes in the left fringe.
#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (global-diff-hl-mode))

(add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
#+end_src

Disable border.
#+begin_src emacs-lisp
(setq diff-hl-draw-borders nil)
#+end_src

Change colors.
#+begin_src emacs-lisp
(custom-set-faces
'(diff-hl-change ((t (:background "#8fe9e3"))))
'(diff-hl-insert ((t (:background "#80f1a4"))))
'(diff-hl-delete ((t (:background "#f5cce1")))))
#+end_src

** Git Modes
[[https://github.com/magit/git-modes][Git Modes]] are major modes for Git configuration files.
#+begin_src emacs-lisp
(use-package gitattributes-mode)
(use-package gitconfig-mode)
(use-package gitignore-mode)
#+end_src

* Chinese Optimization
  # TODO: Slipt word https://github.com/cireu/jieba.el
** Font
# FIX: Bold is too Bold.
Use macOS's default Chinese font for Chinese characters in Emacs.
According to:  https://support.apple.com/en-us/guide/pages/tanfbd4156e/mac
#+begin_src emacs-lisp
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil 'font)
                    charset (font-spec :family "PingFang SC")))
#+end_src

** Display
Break lines normally for Chinese characters in visual line mode.
#+begin_src emacs-lisp
;; This will work until emacs 28.1
;; (setq word-wrap-by-category t)
#+end_src

# FIX: Performance is lack.
[[https://github.com/casouri/valign][valign]] can properly align tables containing variable-pitch font, CJK characters and images.
#+begin_src emacs-lisp
(use-package valign
  :config
  (add-hook 'org-mode-hook #'valign-mode)
  (setq valign-fancy-bar 1))
#+end_src

** Search
[[https://github.com/laishulu/evil-pinyin][evil-pinyin]]: Search Chinese characters with the first letter of Pinyin.
#+begin_src emacs-lisp
(use-package evil-pinyin
  :config
  (evil-select-search-module 'evil-search-module 'evil-search)
  (global-evil-pinyin-mode))
#+end_src

** Input Method
[[https://github.com/laishulu/emacs-smart-input-source][sis]] can auto switch to English input method and save the previous input method when entering Evil normal mode, restore the saved input method when switching back to Evil insert mode.
#+begin_src emacs-lisp
(use-package sis
  :config
  (sis-ism-lazyman-config
   "com.apple.keylayout.ABC"
   "com.apple.inputmethod.SCIM.ITABC")
  (sis-global-respect-mode t)
  (sis-global-context-mode t))
#+end_src

** Keybindings
Make keybindings work under Chinese input method.

| Keybindings | Chinese Keybindings | Features              |
|-------------+---------------------+-----------------------|
| ~Command + [~ | ~Command + 】~        | Go to previous Buffer |
| ~Command + ]~ | ~Command + 【~        | Go to next Buffer     |
| ~Command + ,~ | ~Command + ，~        | Open config file      |

#+begin_src emacs-lisp
(global-set-key (kbd "s-【") 'previous-buffer)
(global-set-key (kbd "s-】") 'next-buffer)
(global-set-key (kbd "s-，") 'open-config-file)
#+end_src
