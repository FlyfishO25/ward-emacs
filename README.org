*This repo is on building, use it at your own risk.*

* An Expected Emacs Setup for MacOS
- Default with shortcuts and features that you already learned.
- Has an expected vim emulator via [[https://github.com/emacs-evil/evil][evil-mode]].
- Provides tools like [[https://orgmode.org/][org-mode]] and [[https://magit.vc/][magit]].
- Highly customizable.
- It's just an Text Editor, not an IDE(I use [[https://www.jetbrains.com/idea/][IDEA]]).
- Do not expected too much, and you'll be happy.

So this is the ultimate Text Editor for lifetime, if it looks good to you, welcome aboard.

* Checklist
- Emacs 26.3
- You'd better learn Vim before trying this.

* Installation
#+BEGIN_SRC bash
cd ~; git clone https://github.com/willbchang/emacs.d.git .emacs.d
#+END_SRC
* Configuration
** Pre-Configuration
Always ensure the package is installed.
#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.
#+begin_src emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)
#+end_src

** UI
*** Title Bar
Show full path in title bar.
#+begin_src emacs-lisp
(setq frame-title-format
    '(:eval
       (if buffer-file-name
           (abbreviate-file-name buffer-file-name)
           "%b")))
#+end_src
*** Tool Bar
Disable toolbar.
#+begin_src emacs-lisp
(tool-bar-mode 0)
#+end_src

*** Tab Bar

*** Side Bar
*** Scroll Bar
#+begin_src emacs-lisp
(scroll-bar-mode 0)
#+end_src
*** Status Bar
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1))
(setq doom-modeline-buffer-encoding nil)
(setq doom-modeline-indent-info t)
(setq column-number-mode t)
(dolist (modeline-face '(
      doom-modeline-buffer-path
      doom-modeline-buffer-file
      doom-modeline-project-dir
      doom-modeline-buffer-modified
      doom-modeline-buffer-major-mode
      doom-modeline-info))
  (set-face-attribute modeline-face nil :weight 'normal))
#+end_src

Hide file icon and file name.
#+begin_src emacs-lisp
(doom-modeline-def-segment buffer-info
  "buffer info segment."
  "")
(doom-modeline-def-segment buffer-info-simple
  "simple buffer info segment."
  "")
#+end_src

Count column number from 1 instead of 0.
#+begin_src emacs-lisp
(setq column-number-indicator-zero-based nil)
#+end_src
*** Cursor
Set cursor color to pink.
#+begin_src emacs-lisp
(set-cursor-color "#e2416c")
(add-hook 'after-make-frame-functions 'set-cursor-hook)

(defun set-cursor-hook (frame)
(modify-frame-parameters
  frame (list (cons 'cursor-color "#e2416c"))))
#+end_src

*** Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "SF Mono-18")
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "s-0") 'reset-font-size)
(global-set-key (kbd "s-=") 'text-scale-increase)
(global-set-key (kbd "s--") 'text-scale-decrease)
(defun reset-font-size ()
  (interactive)
  (text-scale-set 0))
#+end_src

*** Behavior
Highlight urls and make them clickable.
#+begin_src emacs-lisp
(goto-address-mode 1)
#+end_src

Highlight paired brackets, includes (), [], {} and so on...
#+begin_src emacs-lisp
(show-paren-mode 1)
(require 'paren)
(set-face-background 'show-paren-match (face-background 'default))
(set-face-foreground 'show-paren-match "#f7d451")
(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
#+end_src

** Window Management
*** Resize Window
=Ctrl + Command + F=: Set window full screen.
#+begin_src emacs-lisp
(global-set-key (kbd "<C-s-268632070>") 'toggle-frame-fullscreen)
#+end_src

*** Create/Close Window/Buffer
=Command + N=: Create new window, default with org-mode and evil-mode
#+begin_src emacs-lisp
(global-set-key (kbd "s-n") 'new-empty-frame)
#+end_src

=Command + W=: Close current buffer.
#+begin_src emacs-lisp
(global-set-key (kbd "s-w") 'kill-this-buffer)
#+end_src

=Shift + Command + W=: Close current window.
#+begin_src emacs-lisp
(global-set-key (kbd "s-W") 'delete-frame)
#+end_src

TODO: Make the buffers independent in each frame.
#+begin_src emacs-lisp
(defun new-empty-frame ()
  "Create a new frame with a new empty buffer. With org-mode and evil-mode enabled."
  (interactive)
  (let ((buffer (generate-new-buffer "untitled")))
    (set-buffer buffer)
    (org-mode)
    (evil-mode 1)
    (display-buffer buffer '(display-buffer-pop-up-frame . nil))))
#+end_src

*** Behavior
When you double-click on a file in the Mac Finder open it as a buffer in the existing Emacs frame, rather than creating a new frame just for that file.
#+begin_src emacs-lisp
(setq ns-pop-up-frames nil)
#+end_src
** File
Disable startup screen.
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src

Empty scratch file on init.
#+begin_src emacs-lisp
(setq initial-scratch-message nil)
#+end_src

Save cursor position for each file.
#+begin_src emacs-lisp
(save-place-mode t)
#+end_src

Save/Restore opened files and windows configuration.
#+begin_src emacs-lisp
(desktop-save-mode 1)
#+end_src

Save files automatically.
#+begin_src emacs-lisp
(auto-save-visited-mode 1)
#+end_src

Revert (update) buffers automatically when underlying files are changed externally.
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

Display relative line numbers on text mode and code mode.
#+begin_src emacs-lisp
(setq-default display-line-numbers-type 'visual
              display-line-numbers-current-absolute t)
(add-hook 'text-mode-hook #'display-line-numbers-mode)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

** Text Editing
*** Moving Cursor
Make =Command + ArrowKey= behaves like MacOS app.
- =Command + ↑=: move to the top of the file.
- =Command + ↓=: move to the bottom of the file.
- =Command + ←=: move to the beginning of the line.
- =Command + →=: move to the end of the line.
#+begin_src emacs-lisp
(global-set-key (kbd "s-<up>") 'beginning-of-buffer)
(global-set-key (kbd "s-<down>") 'end-of-buffer)
(global-set-key (kbd "s-<right>") 'move-end-of-line)
(global-set-key (kbd "s-<left>") 'move-beginning-of-line)
#+end_src

*** Selecting Text
*** Editing Text
=Command + Backspace=: Delete current line from cursor to the beginning
#+begin_src emacs-lisp
(global-set-key (kbd "s-<backspace>") 'backward-kill-line)
#+end_src

=Command + Shift + Backspace=: Delete whole line entirely.\\
/This is not the default behavior of MacOS, but I found it's useful./
#+begin_src emacs-lisp
(global-set-key (kbd "s-S-<backspace>") 'kill-whole-line)
#+end_src


=Command + /=: Comment/Uncomment line(s).
#+begin_src emacs-lisp
(global-set-key (kbd "s-/") 'comment-or-uncomment-region-or-line)
#+end_src

TODO: Enable shift selection
TODO: Highlight FIXME/TODO/BUG
TODO: Auto Save mode
#+begin_src emacs-lisp
  ;; (setg org-support-shift-select t)
  ;; (font-lock-add-keywords nil '(("\\b\\(FIXME\\|TODO\\|BUG\\)\\b" 1 font-lock-warning-face t)))
#+end_src

#+begin_src emacs-lisp
(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
 (kill-line (- 1 arg)))
#+end_src

TODO:
1. Comment on empty line, it adds (e.g.) and put the cursor behind
2. Comment one line, it adds before and forward one line
3. Comment on region, it add and move to the next line of the region
4. Cannot uncomment inside org mode code block
#+begin_src emacs-lisp
(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if
there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))
#+end_src

Auto pair brackets, quotes etc.
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src
*** Behavior
Overwrite selection on pasting.
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

Delete trailing whitespace on saving a buffer.
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Treat CamelCaseSubWords as separate words in programming mode.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+end_src

Indent with 2 space.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)
#+end_src
** Remap Shortcuts
*** Rebind Shorcuts
Cancel partially typed or accidental command.
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+end_src

*** Unset Shorctus
Unset =Command + K== for kill buffer.
#+begin_src emacs-lisp
(global-unset-key (kbd "s-k"))
#+end_src

** Sounds
Disable the ring bell when scroll beyond the document.
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Server & Proxy
Start server for opening file/folder from emacsclient.
#+begin_src emacs-lisp
(server-start)
#+end_src

Set http(s) proxy for Emacs, for VPN users.
#+begin_src emacs-lisp
(setq url-proxy-services '(("no_proxy" . "127.0.0.1")
                          ("http" . "127.0.0.1:1087")
                          ("https" . "127.0.0.1:1087")))
#+end_src

** Extensions
*** Evil Mode
Evil is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+end_src

Install evil-collection, which provides evil-friendly bindings for many modes.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list
        '(dired magit))
  (evil-collection-init))
#+end_src

=evil-surround= makes surround text with paired symbols easily.
#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src

*** Org Mode
Enable headline and subcontent in the indented view.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
*** Magit
Use magit as git interface.
#+begin_src emacs-lisp
(use-package magit
  :config
(setq magit-diff-refine-hunk t))
#+end_src

*** Git Gutter
Show file changes in the left margin.
#+begin_src emacs-lisp
(use-package git-gutter
  :config
  (global-git-gutter-mode 't))
#+end_src

Update all window when Emacs focus in.
/This fixes git gutter cannot update the file status after committing outside of Emacs./
#+begin_src emacs-lisp
(add-hook 'focus-in-hook 'git-gutter:update-all-windows)
#+end_src

*** Org Superstar
Prettify headings and plain lists in Org mode.
#+begin_src emacs-lisp
(use-package org-superstar
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-hide-leading-stars t))
#+end_src

* Credit
It started with [[https://github.com/redguardtoo/emacs.d][redguardtoo/emacs.d]] and learned from [[https://github.com/hrs/dotfiles][hrs/dotfiles]] and [[https://github.com/hrs/sensible-defaults.el][hrs/sensible-defaults.el]].

* LICENSE
GPL-3.0 License
